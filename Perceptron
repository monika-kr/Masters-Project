import numpy as np


class Perceptron(object):
    def __init__(self, eta=0.01, epochs=10):
        self.eta = eta
        self.epochs = epochs

    def fit(self, x, y):

        self.w_ = np.zeros(1 + x.shape[1])
        self.e_ = []

        for _ in range(self.epochs):
            error = 0
            for xi, target in zip(x, y):
                update = self.eta * (target - self.predict(xi))
                self.w_[1:] += update * xi
                self.w_[0] += update
                error += int(update != 0.0)
            self.e_.append(error)
        return self

    def net_input(self, x):
        """Calculate net input"""
        return np.dot(x, self.w_[1:]) + self.w_[0]

    def activation(self, x):
        """Compute linear activation"""
        return self.net_input(x)

    def predict(self, x):
        """Return class label after unit step"""
        return np.where(self.activation(x) >= 0.0, 1, -1)



import pandas as pd

df = pd.read_csv('Breast_c.csv', header=None)
df.tail()

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

y = df.iloc[1:568, 1].values
y = np.where(y == 'M', -1, 1)
x = df.iloc[1:568, [2,3,4,5]].values


plt.tight_layout()
plt.show()

ppn = Perceptron(eta=0.5, epochs=400)

ppn.fit(x.astype(float), y)

plt.plot(range(1, len(ppn.e_) + 1), ppn.e_)
plt.xlabel('Epochs')
plt.ylabel('Number of misclassifications')
plt.tight_layout()
plt.show()
